####################################################################
# VSTS Build Configuration, Version 1.4
#
# (c)2022 superdev GmbH
####################################################################

name: $[format('{0}', variables['buildName'])]

pool:
  vmImage: 'windows-2022'

trigger:
  branches:
    include:
    - master
    - develop
    - feature/*
    - bugfix/*

  paths:
    exclude:
    - README.md
    - Images/*
    - Samples/*

variables:
  solution: 'PiWeatherStation.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(format('{0}.{1}', variables.majorVersion, variables.minorVersion), 0)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    # Versioning: 1.0.0
    semVersion: $[format('{0}.{1}.{2}', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/'))) }}:
    # Versioning: 1.0.0-pre
    semVersion: $[format('{0}.{1}.{2}-pre', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    # Versioning: 1.0.0-pr.000000001
    semVersion: $[format('{0}.{1}.{2}-pr.{3}', variables.majorVersion, variables.minorVersion, variables.patchVersion, variables['System.PullRequest.PullRequestId'])]
  buildName: $[format('{0}', variables.semVersion)]

steps:
- task: Bash@3
  displayName: 'Print all variables'
  inputs:
    targetType: 'inline'
    script: 'env | sort'
   
- task: Assembly-Info-NetCore@2
  displayName: 'Update Assembly Info'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: |
      **/*.csproj
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    Product: 'WeatherDisplay.Api'
    Description: ''
    Company: 'superdev GmbH'
    Copyright: '(c) $(date:YYYY) superdev GmbH'
    VersionNumber: '$(Build.BuildNumber)'
    FileVersionNumber: '$(Build.BuildNumber)'
    InformationalVersion: '$(Build.BuildNumber)'
    PackageVersion: '$(Build.BuildNumber)'
    LogLevel: 'verbose'
    FailOnWarning: false
    DisableTelemetry: false'

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 6.x'
  inputs:
    versionSpec: 6.x

- task: DotNetCoreCLI@2
  displayName: 'NuGet restore'
  inputs:
    command: restore
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    projects: '$(solution)'
    arguments: '--no-restore --configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run UnitTests'
  inputs:
    command: test
    projects: '**/*.Tests.csproj'
    arguments: '--no-restore --no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:Exclude="[Microsoft*]*%2C[Mono*]*%2C[xunit*]*%2C[*.Testdata]*" /p:CoverletOutput=UnitTests.coverage.cobertura.xml /p:MergeWith=$(Build.SourcesDirectory)/Tests/CoverletOutput/coverage.json /p:CoverletOutputFormat=cobertura'
    
- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: 'Create Code Coverage Report'
  inputs:
    reports: '$(Build.SourcesDirectory)/Tests/**/*.coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
    reporttypes: 'Cobertura'
    assemblyfilters: '-xunit*'

- task: DotNetCoreCLI@2
  displayName: 'Publish WeatherDisplay.Api Development'
  inputs:
    command: publish
    projects: 'WeatherDisplay.Api/WeatherDisplay.Api.csproj'
    publishWebProjects: false
    arguments: '--no-restore --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/Development /p:EnvironmentName=Development'
    zipAfterPublish: true
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: DotNetCoreCLI@2
  displayName: 'Publish WeatherDisplay.Api Production'
  inputs:
    command: publish
    projects: 'WeatherDisplay.Api/WeatherDisplay.Api.csproj'
    publishWebProjects: false
    arguments: '--no-restore --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/Production /p:EnvironmentName=Production'
    zipAfterPublish: true
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: ArchiveFiles@2
  displayName: 'Zip WeatherDisplay.Api Development'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/Development'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Development/WeatherDisplay.Api_$(semVersion).zip'
    replaceExistingArchive: true
    
- task: ArchiveFiles@2
  displayName: 'Zip WeatherDisplay.Api Production'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/Production'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Production/WeatherDisplay.Api_$(semVersion).zip'
    replaceExistingArchive: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
